plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        url 'https://modmaven.dev/'
    }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Thermal Maven"
        url = uri("https://maven.covers1624.net/")
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}


    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
        //JEI
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jeiVersion}"))
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jeiVersion}"))
        runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jeiVersion}"))


        // Thermal
        implementation(fg.deobf("com.teamcofh:cofh_core:$minecraft_version-$cofhCoreVersion"))
        implementation fg.deobf("com.teamcofh:thermal_core:${minecraft_version}-${thermalCoreVersion}.+")
        implementation fg.deobf("curse.maven:thermal-foundation-222880:$thermalFoundationFile")
        runtimeOnly(fg.deobf("com.teamcofh:thermal_innovation:$minecraft_version-$thermalInnovationVersion"))
        runtimeOnly(fg.deobf("com.teamcofh:thermal_expansion:$minecraft_version-$thermalExpansionVersion"))

        //KubeJS
        implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
        implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
        implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    }

    tasks.named('processResources', ProcessResources).configure {
        var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                                 forge_version       : forge_version, forge_version_range: forge_version_range,
                                 loader_version_range: loader_version_range,
                                 mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                                 mod_authors         : mod_authors, mod_description: mod_description,]

        inputs.properties replaceProperties

        filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }
    }

    tasks.named('jar', Jar).configure {
        manifest {
            attributes(["Specification-Title"     : mod_id,
                        "Specification-Vendor"    : mod_authors,
                        "Specification-Version"   : "1",
                        "Implementation-Title"    : project.name,
                        "Implementation-Version"  : project.jar.archiveVersion,
                        "Implementation-Vendor"   : mod_authors,
                        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
        }

        finalizedBy 'reobfJar'
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }